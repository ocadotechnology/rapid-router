# Generated by Django 5.1.10 on 2025-06-10 12:11
import logging

from django.apps.registry import Apps
from django.db import migrations, models

LOGGER = logging.getLogger(__name__)

attempt_data = {}


def collect_attempt_data(apps: Apps, *args):
    """
    For every student and for every level, collect all completed attempts.
    1 entry per student per level.
    1 entry = 1 new Attempt object:
    - time_spent = sum of elapsed time of all attempts, converted to seconds
    - score = score if best_attempt
    - count = len(attempts)
    """
    Attempt = apps.get_model("game", "Attempt")
    Level = apps.get_model("game", "Level")
    Student = apps.get_model("common", "Student")

    students_with_attempts = Student.objects.filter(attempts__isnull=False)
    total_attempts = 0

    LOGGER.info(f"Retrieved {students_with_attempts.count()} students with attempts.")

    for student in students_with_attempts.iterator(chunk_size=5000):
        # Collect only complete attempts, meaning attempts that have a populated score and finish time
        student_attempts = Attempt.objects.filter(
            student=student,
            score__isnull=False,
            start_time__isnull=False,
            finish_time__isnull=False,
        )

        # If a student doesn't have any complete attempt, move on to next student
        if len(student_attempts) == 0:
            continue

        student_attempts_data = {}
        levels_with_attempts = Level.objects.filter(attempts__in=student_attempts)

        for level in levels_with_attempts:
            attempts_per_level = student_attempts.filter(level=level)
            count = len(attempts_per_level)

            best_attempt = attempts_per_level.filter(is_best_attempt=True)
            assert len(best_attempt) == 1
            score = best_attempt[0].score

            time_spent = 0

            for attempt in attempts_per_level.iterator(chunk_size=1000):
                attempt_duration = int((
                    attempt.finish_time - attempt.start_time
                ).total_seconds())
                time_spent += attempt_duration

            LOGGER.info(f"Processed {attempts_per_level.count()} attempts.")
            total_attempts += attempts_per_level.count()
            LOGGER.info(f"Processed {total_attempts} total attempts.")

            level_attempts_data = {
                "count": count,
                "time_spent": time_spent,
                "score": score,
            }
            student_attempts_data[level.pk] = level_attempts_data

        attempt_data[student.pk] = student_attempts_data


def delete_attempts(apps: Apps, *args):
    Attempt = apps.get_model("game", "Attempt")

    Attempt.objects.all().delete()
    LOGGER.info("Deleted all attempts.")


def aggregate_attempts(apps: Apps, *args):
    Attempt = apps.get_model("game", "Attempt")
    Level = apps.get_model("game", "Level")
    Student = apps.get_model("common", "Student")

    LOGGER.info(f"Aggregated attempts for {len(attempt_data.keys())} students.")

    for student, levels in attempt_data.items():
        for level, level_data in levels.items():
            Attempt(
                time_spent=level_data["time_spent"],
                level=Level.objects.get(pk=level),
                student=Student.objects.get(pk=student),
                score=level_data["score"],
                count=level_data["count"],
            ).save()
        LOGGER.info(f"Created {Attempt.objects.all().count()} attempts.")


class Migration(migrations.Migration):

    dependencies = [
        ("game", "0116_update_worksheet_video_links"),
    ]

    operations = [
        migrations.RunPython(code=collect_attempt_data),
        migrations.RemoveField(
            model_name="attempt",
            name="finish_time",
        ),
        migrations.RemoveField(
            model_name="attempt",
            name="is_best_attempt",
        ),
        migrations.RemoveField(
            model_name="attempt",
            name="night_mode",
        ),
        migrations.RemoveField(
            model_name="attempt",
            name="python_workspace",
        ),
        migrations.RemoveField(
            model_name="attempt",
            name="start_time",
        ),
        migrations.RemoveField(
            model_name="attempt",
            name="workspace",
        ),
        migrations.AddField(
            model_name="attempt",
            name="count",
            field=models.IntegerField(blank=True, default=0, null=True),
        ),
        migrations.AddField(
            model_name="attempt",
            name="time_spent",
            field=models.BigIntegerField(blank=True, default=0, null=True),
        ),
        migrations.AlterField(
            model_name="attempt",
            name="score",
            field=models.FloatField(blank=True, default=0, null=True),
        ),
        migrations.RunPython(code=delete_attempts),
        migrations.RunPython(code=aggregate_attempts),
    ]
